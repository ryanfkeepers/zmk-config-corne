#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define NAV 1
#define SYM 2
#define ADJ 3
#define EXTRA 4

/ {
    behaviors {
        htr: hold_tap_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_RIGHT";
            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <175>;
            global-quick-tap;
            require-prior-idle-ms = <1000>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <1 13 25 26 14 2 3 15 27 28 16 4 5 17 29>;
        };

        htl: hold_tap_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_LEFT";
            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <175>;
            global-quick-tap;
            require-prior-idle-ms = <1000>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 18 30 31 19 7 8 20 32 33 21 9 10 34 22>;
        };

        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <175>;
            global-quick-tap;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        htrs: hold_tap_right_short {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_RIGHT_SHORT";
            #binding-cells = <2>;
            tapping-term-ms = <500>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <135>;
            global-quick-tap;
            require-prior-idle-ms = <1000>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <1 13 25 26 14 2 3 15 27 28 16 4 5 17 29>;
        };

        htls: hold_tap_left_short {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_LEFT_SHORT";
            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <115>;
            global-quick-tap;
            require-prior-idle-ms = <1000>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 18 30 31 32 33 34 22 10 9 8 7 19 20 21>;
        };

        ht_kp_qu: ht_kp_qu {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_KP_QU";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&qu>, <&kp>;

            quick-tap-ms = <175>;
            global-quick-tap;
            require-prior-idle-ms = <200>;
            hold-trigger-on-release;
        };

        hsl_t: hold_sticky_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_STICKY_LAYER_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&sl>, <&kp>;

            quick-tap-ms = <150>;
            global-quick-tap;
            require-prior-idle-ms = <200>;
            hold-trigger-on-release;
        };

        hsk_t: hold_sticky_key_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_STICKY_KEY_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&sk>, <&kp>;

            quick-tap-ms = <200>;
            global-quick-tap;
            require-prior-idle-ms = <200>;
            hold-trigger-on-release;
        };

        h_skt: hold_stickykeytap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_STICKYKEYTAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&sk>;

            quick-tap-ms = <200>;
            global-quick-tap;
            require-prior-idle-ms = <200>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        SYS_LAYER {
            bindings = <&mo 4>;
            key-positions = <26 27 28 38>;
            timeout-ms = <200>;
            require-prior-idle-ms = <500>;
            layers = <0>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <3 4>;
            timeout-ms = <200>;
            require-prior-idle-ms = <500>;
        };

        coleq {
            bindings = <&colon_eq>;
            key-positions = <8 7>;
            timeout-ms = <200>;
            require-prior-idle-ms = <1000>;
        };

        screenshot {
            bindings = <&kp LS(LC(LG(NUMBER_4)))>;
            key-positions = <1 10>;
            require-prior-idle-ms = <1000>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <29 30>;
            require-prior-idle-ms = <1000>;
        };

        leader {
            bindings = <&sl 3>;
            key-positions = <31 32>;
            timeout-ms = <1000>;
            require-prior-idle-ms = <1000>;
        };
    };

    //

    macros {
        colon_eq: coleq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp EQUAL>;
            label = "COLEQ";
            wait-ms = <5>;
        };

        qu: qu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Q &kp U>;
            label = "QU";
            wait-ms = <5>;
        };

        wez_narrow: wez_narrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(RC(RG(RS(SPACE)))) &kp N9>;
            label = "WEZ_NARROW";
            wait-ms = <5>;
        };

        wez_rand: wez_rand {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(RC(RG(RS(SPACE)))) &kp R>;
            label = "WEZ_RAND";
            wait-ms = <5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        ALPHA {
            display-name = "Alphabet";

            // -----------------------------------------------------------------------------------------
            // |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
            // |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
            // |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
            // | GUI | CTRL | SHFT | LWR | SPC |   | ENT | RSE  | BKSP | ALT | ESC |

            bindings = <
&trans  &none  &kp B        &kp L               &kp P            &none               &none            &ht_kp_qu 0 U  &kp O                   &kp F                  &none                &trans
&trans  &kp S  &htl LALT N  &htls LEFT_SHIFT R  &htl LGUI T      &ht X G             &ht Z Y          &htr RGUI H    &htrs RIGHT_SHIFT A     &htr RALT E            &ht SQT I            &trans
&trans  &kp Q  &kp W        &kp C               &kp D            &htl LCTRL K        &ht J V          &kp M          &ht LEFT_BRACKET COMMA  &ht RIGHT_BRACKET DOT  &ht BACKSLASH SLASH  &trans
                            &none               &lt 1 BACKSPACE  &ht COLON ESCAPE    &sk RIGHT_SHIFT  &lt 2 SPACE    &none
            >;

            label = "Alphabet";
        };

        SYMNUM {
            display-name = "SymNum";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            // | GUI | CTRL | SHFT | LWR | SPC |   | ENT | RSE  | BKSP | ALT | ESC |

            bindings = <
&trans  &trans               &ht TILDE GRAVE    &ht COLON SEMICOLON   &ht RIGHT_PARENTHESIS LEFT_PARENTHESIS  &trans            &trans              &ht PLUS EQUAL  &ht QUESTION SLASH  &ht UNDERSCORE MINUS  &trans  &trans
&trans  &ht DOLLAR NUMBER_4  &ht HASH NUMBER_3  &ht AT_SIGN NUMBER_2  &ht EXCLAMATION NUMBER_1                &ht PERCENT N5    &ht CARET NUMBER_6  &kp N0          &ht AMPERSAND N7    &ht ASTERISK N8       &kp N9  &trans
&trans  &trans               &trans             &trans                &trans                                  &trans            &kp RIGHT_GUI       &trans          &trans              &trans                &trans  &trans
                                                &trans                &trans                                  &trans            &kp RIGHT_SHIFT     &kp RIGHT_ALT   &trans
            >;

            label = "SymNum";
        };

        VIMNAV {
            display-name = "VimNav";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans              &kp LG(LEFT_BRACE)  &kp LG(LS(SPACE))  &kp RG(RIGHT_BRACE)  &trans           &trans          &kp LC(D)       &kp LC(U)     &kp PERCENT      &trans      &trans
&trans  &kp LC(LEFT_ARROW)  &kp LEFT_ALT        &kp LEFT_SHIFT     &kp LEFT_GUI         &kp RC(RIGHT)    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &kp DOLLAR  &trans
&trans  &trans              &kp LG(LEFT_ARROW)  &kp LG(TAB)        &kp RG(RIGHT_ARROW)  &trans           &kp H           &kp J           &kp K         &kp L            &kp LCTRL   &trans
                                                &trans             &trans               &key_repeat      &trans          &trans          &trans
            >;

            label = "VimNav";
        };

        LEADER {
            bindings = <
&none  &none  &none        &none      &kp RG(V)  &none    &none      &none  &none      &kp RG(U)  &none  &none
&none  &none  &wez_narrow  &wez_rand  &none      &none    &kp RG(C)  &none  &kp RG(A)  &none      &none  &none
&none  &none  &kp RG(S)    &kp RG(X)  &kp RG(X)  &none    &kp RG(V)  &none  &none      &none      &none  &none
                           &none      &none      &none    &none      &none  &none
            >;
        };

        SYSTEM {
            display-name = "Leader";
            bindings = <
&trans  &bootloader  &trans  &trans  &trans  &trans            &bt BT_CLR    &trans        &bt BT_CLR_ALL  &trans        &bootloader   &trans
&trans  &trans       &trans  &trans  &trans  &studio_unlock    &trans        &trans        &trans          &trans        &trans        &trans
&trans  &trans       &trans  &trans  &trans  &trans            &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3  &bt BT_SEL 4  &trans
                             &trans  &trans  &trans            &trans        &trans        &trans
            >;

            label = "System";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
